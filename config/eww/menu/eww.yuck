(defpoll CPU_USAGE :interval "1s" `menu/scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `menu/scripts/sys_info --mem`)
(defpoll TEMP :interval "1s" `menu/scripts/sys_info --temp`)
(defpoll BATTERY :interval "5s" `menu/scripts/sys_info --bat`)

(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "date '+%m'")
(defpoll calendar_year :interval "10h" "date '+%Y'")

(defpoll DAEMON :interval "1s" `playerctl --player spotify,vlc,firefox,brave status`)
(deflisten SONG "playerctl --player spotify,vlc,firefox,brave metadata --format '{{trunc(title, 15)}}' --follow")
(deflisten ARTIST "playerctl --player spotify,vlc,firefox,brave metadata --format '{{trunc(artist, 25)}}' --follow")
(defpoll CURRENT :interval "1s" `menu/scripts/music_info --time`)
(defpoll COVER :interval "1s" `menu/scripts/music_info --cover`)
(defpoll TTIME :interval "1s" `menu/scripts/music_info --ttime`)


(defpoll ICON :interval "15m" `menu/scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `menu/scripts/weather_info --stat`)
(defpoll WEATHER :interval "15m" `menu/scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `menu/scripts/weather_info --hex`)


(defpoll FREE :interval "1m" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G//'`)
(defpoll FREE_USER :interval "1m" `df -h /home | awk '{print $4}' | tail -n 1 | sed 's/G//'`)
(defpoll TOTAL :interval "1m" `df -h / | awk '{print $2}' | tail -n 1 | sed 's/G//'`)
(defpoll TOTAL_USER :interval "1m" `df -h /home | awk '{print $2}' | tail -n 1 | sed 's/G//'`)

(defpoll NOTIFY :interval "2s" `dunstctl is-paused`)
(defpoll GAMMA :interval "7s" `if [[ $(pgrep gammastep) ]]; then echo true; else echo false; fi`)
(defpoll AIRPLANE :interval "2s" `if [[ $(rfkill -no SOFT | tr -d "blocked\n") ]]; then echo true; else echo false; fi`)
(defpoll LOCK :interval "5s" `if [[ -f /tmp/lockscr ]]; then echo true; else echo false; fi`)

(defpoll current-brightness :interval "1s" "echo $(( $(brightnessctl g)*100 / $(brightnessctl m) ))")

(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll volume-mute :interval "1s" "echo $\(amixer -D pulse sget Master | grep 'Left:' | cut -d [ -f 3 | tr -d ])")


(defwidget menu-notify []
	(box :class "menu-button-${NOTIFY}" 
	     :orientation "h"
		 :tooltip "Do Not Disturb"
		 :valign "start"
		(button :class "menu-button"
			:onclick "dunstctl set-paused toggle; eww update NOTIFY=$(dunstctl is-paused)"
			"")))

(defwidget menu-nightlight []
	(box :class "menu-button-${GAMMA}"
	     :orientation "h"
		 :tooltip "Night Light"
		 :valign "start"
		(button :class "menu-button"
			:onclick "$HOME/.config/eww/menu/scripts/gammainfo"
			"󱩌")))

(defwidget menu-locktimeout []
	(box :class "menu-button-${LOCK}"
	     :orientation "h"
		 :tooltip "Disable Lock Timeout"
		 :valign "start"
		(button :class "menu-button"
			:onclick "if [[ -f /tmp/lockscr ]]; then rm /tmp/lockscr; else touch /tmp/lockscr; fi"
			"󱙲")))

(defwidget menu-power []
	(box :class "menu-button-${!AIRPLANE}" 
	     :orientation "h"
		 :valign "start"
		(button :class "menu-button"
			:onclick "rfkill toggle all"
			"󰀝")))


(defwidget menu-calendar []
		(box :class "menu-cal"
			 :orientation "h"
			(box :class "cal-inner-box"
				(calendar :class "cal"
						  :day calendar_day
						  :month calendar_month
						  :year calendar_year))))

(defwidget menu-system []
(box :class "menu-system" :space-evenly false
	(label :text "CPU" :angle 90 :valign "end" :class "menu-cpu-label")
	(scale :value CPU_USAGE :orientation "v" :flipped true :active "false" :draw-value true :min 0 :max 100 :class "menu-cpu")
	(label :text "Memory" :angle 90 :valign "end" :class "menu-mem-label")
	(scale :value MEM_USAGE :orientation "v" :flipped true :active "false" :draw-value true :min 0 :max 100 :class "menu-mem")
	(label :text "Temperature" :angle 90 :valign "end" :class "menu-temp-label")
	(scale :value TEMP :orientation "v" :flipped true :active "false" :draw-value true :min 0 :max 100 :class "menu-temp")
	(label :text "Battery" :angle 90 :valign "end" :class "menu-bat-label")
	(scale :value BATTERY :orientation "v" :flipped true :active "false" :draw-value true :min 0 :max 100 :class "menu-bat")))

(defwidget menu-storage []
	(box :class "menu-storage" :orientation "v" :space-evenly false
		(box :orientation "h" :space-evenly true
			(label :class "menu-disk-icon" :halign "start" :text "󰯤")
			(label :class "menu-disk-label" :halign "end" :text "${FREE}GB out of ${TOTAL}GB free"))
		(scale :value FREE :min 0 :max TOTAL :active "false" :class "menu-disk-root")
		(box :orientation "h" :space-evenly true
			(label :class "menu-disk-icon" :halign "start" :text "󰯨")
			(label :class "menu-disk-label" :halign "end" :text "${FREE_USER}GB out of ${TOTAL_USER}GB free"))
(scale :value FREE_USER :min 0 :max TOTAL_USER :active "false" :class "menu-disk-user")))

(defwidget menu-music []
		(box :class "menu-album-art" :height 300 :vexpand "true" :hexpand "false" :style "background-image: url('${COVER}');" :orientation "v"
			(label :halign "end" :class "menu-song"  :onclick "menu/scripts/open_apps --sl" :wrap "true" :limit-width 15 :text { DAEMON == "Playing" ? SONG : "Not Playing" })
			(label :halign "end" :class "menu-artist" :wrap "true" :limit-width 18 :text { DAEMON == "Playing" ? ARTIST : "" })
			(box :orientation "h" :spacing 20 :halign "end" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "menu-music-prev" :onclick "menu/scripts/music_info --prev" "")
				(button :class "menu-music-pause" :onclick "menu/scripts/music_info --toggle" { DAEMON == "Playing" ? "" : "" }) ;
				(button :class "menu-music-next" :onclick "menu/scripts/music_info --next" ""))
			(box :class "menu-music-scale" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onchange "playerctl --player spotify,vlc,firefox,brave position {}" :min 0 :active "true" :max TTIME :value CURRENT))))


(defwidget menu-weather []
	(box :orientation "h"
		 :spacing 10
		 :class "menu-weather"
		 :space-evenly "false"
		 :vexpand "false"
		 :hexpand "false"
		(label :class "menu-weather-icon"
				:style "color: ${HEX};"
				:halign "end"
			:text ICON)
		(box :orientation "v"
			 :vexpand "false"
			 :hexpand "true"
			 :halign "end"
			(label :class "menu-weather-value"
				   :halign "end"
				   :text WEATHER)
			(label :class "menu-weather-stat"
				:text STAT))))


(defwidget menu []
	 (box :class "menu_main"
		(scroll :vscroll true :hscroll false
			(box :orientation "v"
				 :space-evenly false
				 :valign "start"
				(box :valign "fill"
					 :vexpand true
					 :orientation "h"
					:space-evenly false
					(box :orientation "v"
						 :valign "start"
						(menu-nightlight)
						(menu-locktimeout))
					(box :orientation "v"
						 :valign "start"
						(menu-power)
						(menu-notify))
					(box
						:orientation "v"
						:space-evenly false
						(scale :class "bar-volume-slider"
							:value current-volume
							:orientation "v"
							:flipped true
							:tooltip "Volume: ${current-volume}%"
							:max 100
							:min 0
							:onchange "amixer -D pulse sset Master {}%")
						(button	:onclick "pavucontrol & disown"
							:class "bar-volume-${volume-mute}" ""))
					(box
						:orientation "v"
						:space-evenly false
						(label
							:class "bar-brightness"
						:text "")
						(scale :class "bar-brightness-slider"
							:value current-brightness
							:tooltip "Brightness: ${ round(current-brightness, 0) }%"
							:onchange "brightnessctl s {}%"
							:orientation "v"
							:flipped true
							:max 100
						:min 0)))


				(menu-storage)
				(menu-system)
				(menu-music)
				(menu-weather)
				(menu-calendar)))))

(defvar open-menu false)

; Window
(defwindow menu
			   :namespace "menu"
			   :geometry
			   (geometry :x "0"
						 :y "0" 
						 :anchor "left center"
						 :height "100%"
						 :width "2px")
			   :monitor 0
			   :screen 1
			   :focusable false
			   :stacking "overlay"
			   
			   
			   (menu))



(defwidget bg [] 
	(button :class "bg"
			:onclick "menu/launch.sh menu; disown"))
(defwindow background :stacking "overlay"
					  :screen 1
					  :namespace "dashboard"
					  :geometry (geometry :x 0 :y 0 :anchor "left center" :width "1920px" :height "1080px")
					  :focusable false
					  :stacking "overlay"
					  :hexpand true
					  :vexpand true
					  :monitor 0
					  (bg))



