(defvar eww "/usr/bin/eww")


(defvar show_no_of_windows false)
(deflisten workspaces :initial "[]" "bash ~/.config/eww/bar/scripts/workspaces get")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/bar/scripts/workspaces get-active")
(defwidget workspaces []
(eventbox :onscroll "bash ~/.config/eww/bar/scripts/workspaces change {} ${current_workspace}"
		  :onhover "eww update show_no_of_windows=true"
		  :onhoverlost "eww update show_no_of_windows=false"
		  :class "workspaces-widget"
	(box :space-evenly false :orientation "v" :class "bar-workspace"
		(for workspace in workspaces
			(eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
				(box :class "${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
					(label :text "${show_no_of_windows && workspace.windows > 0 ? workspace.windows : ""}")
					)
				)
			)
		)
	)
)

(defwidget tray []
	(systray :pack-direction "ttb"
			 :icon-size 24
			 :class "bar-tray"))


(defpoll mic_stat :interval "1s" "pactl list sources | grep 'Digital Microphone' -A 5 | grep Mute | cut -f 2 -d ' '")
(defwidget mic[]
	(revealer :duration "500ms"
			  :transition "slidedown"
			  :reveal { mic_stat == "yes"? false : true }
		(label :text { mic_stat == "yes"? "" : "" }
			   :class "bar-mic")))


(defpoll battery :interval "1s"	"bar/scripts/battery percent")
(defpoll batteryColor :interval "1s" "bar/scripts/battery color")
(defpoll batteryDuration :interval "5s" "acpi | cut -d ',' -f 3")
(defwidget bat []
	(box :class "bat_module"
		 :vexpand "false"
		 :hexpand "false"
		(circular-progress :value { battery }
						   :class "bar-battery"
						   :style "color: ${batteryColor};"
				    	   :thickness 3
			(label :class "bar-battery"
			       :limit-width 2
				   :tooltip "${ batteryDuration }"
				   :show_truncated false
				   :wrap false
				   :text { battery == "100" ? "" : battery }))))


(defwidget control []
	(box :orientation "v"
		 :space-evenly false
		 :spacing 5
		 :class "bar-control"
		(bat)
		(mic)
		;; (bright)
		;; (volume)
		(tray)))



(defwidget time []
	(eventbox :onhover "${eww} update clock=true"
			  :onhoverlost "${eww} update clock=false"
			  :onclick "menu/launch.sh menu"
		(box :orientation "v"
			 :class "bar-time"
			 :space-evenly "false"
			 :vexpand "false"
			(revealer :transition "slideup"
					  :reveal clock
				:halign "center"
					  :duration "550ms"
				(box :orientation "v" 
					 :space-evenly false
					 (label :text dayname)
					(label :text day)
					(label :text month)
					(label :text year)
					(label :text "")))
			(label :class "bar-time-hour" :text hour)
			(label :class "bar-time-min" :text min)
			(label :class "bar-time-ampm" :text ampm))))

(defpoll hour :interval "1s" "date '+%I'")
(defpoll min :interval "1s" "date '+%M'")
(defpoll ampm :interval "1s" "date '+%p' | tr '[:upper:]' '[:lower:]'")
(defpoll day :interval "1s"	"date '+%d'")
(defpoll dayname :interval "1s"	"date '+%a' | tr '[:upper:]' '[:lower:]'")
(defpoll month :interval "1s" "date '+%b' | tr '[:upper:]' '[:lower:]'")
(defpoll year :interval "1s" "date '+%g'")
(defvar clock false)




(defwidget power []
			(button :class "bar-button-logout-menu"
				:tooltip "Power Menu"
				:onclick "wlogout -b 4 -p layer-shell --margin-bottom 100 --margin-top 800 --margin-left 500 --margin-right 500 & disown"
				:onrightclick "hyprctl reload; eww reload" "󰸊"))


(defwidget top []
	(box :orientation "v"
		 :space-evenly false
		 :valign "start"
		(workspaces)
		))


(defwidget bottom []
	(box :orientation "v"
		 :space-evenly false
		 :class "bar_bottom"
		(time)
		(power)))


(defwidget end []
	(box :orientation "v"
		 :space-evenly "false"
		 :valign "end"
		 :spacing 5
		(control)
		(bottom)))


(defwidget bar []
	(box :class "bar"
		 :orientation "v"
		 :vexpand "false"
		 :hexpand "false"
		(top)
		(end)))


(defwindow bar :exclusive true
			   :namespace "sidebar"
			   :geometry
			   (geometry :x "4px" 
						 :y "0" 
						 :anchor "left center"
						 :height "100%"
						 :width "50px")
			   :monitor 0
			   :focusable false
			   :stacking "fg"
			   :hexpand "false"
			   :vexpand "false"
	(bar))
